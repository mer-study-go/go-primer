{
  "title": "4 - Organizing Data with StructsÂ ",
  "cells": [
    {
      "type": "text",
      "data": "<h3>Structs in Go</h3>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/A03BDF9E75EE72330C3B4EA0CED955E4.png\" alt=\"Screen Shot 2019-02-04 at 18.10.54.png\" width=\"368\" height=\"345\">"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "<b>Struct</b>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/7722D64C77902EE720C4020C7B989E0B.png\" alt=\"Screen Shot 2019-02-04 at 18.12.31.png\" width=\"487\" height=\"318\">"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/0AEFA150BCF9C9D3F6A167CCEC567EA7.png\" alt=\"Screen Shot 2019-02-04 at 18.12.57.png\" width=\"953\" height=\"366\">"
    },
    {
      "type": "text",
      "data": "<h3>Defining Structs</h3>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/91D48BBC0916B4FC98E67594F76CB35D.png\" alt=\"Screen Shot 2019-02-04 at 18.16.09.png\" width=\"838\" height=\"400\">"
    },
    {
      "type": "text",
      "data": "/src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "type person struct {\n\tfirstName string\n\tlastName  string\n}"
    },
    {
      "type": "text",
      "data": "<h3>Declaring Structs</h3>"
    },
    {
      "type": "text",
      "data": "/src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "func main() {\n\talex := person{firstName: \"Alex\", lastName: \"Anderson\"}\n\tfmt.Println(alex)\n}"
    },
    {
      "type": "text",
      "data": "<h3>Updating Struct Values</h3>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/FFE90363767AF6037B9B2294771C6572.png\" alt=\"Screen Shot 2019-02-04 at 18.21.46.png\" width=\"526\" height=\"402\">"
    },
    {
      "type": "text",
      "data": "/src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "func main() {\n\tvar alex person\n\n\talex.firstName = \"Alex\"\n\talex.lastName = \"Anderson\"\n\n\tfmt.Println(alex)\n\tfmt.Printf(\"%+v\", alex)\n}"
    },
    {
      "type": "text",
      "data": "<h3>Embedding Structs</h3>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/644090550157E402E3D39371AF36973D.png\" alt=\"Screen Shot 2019-02-04 at 18.23.38.png\" width=\"893\" height=\"407\">"
    },
    {
      "type": "text",
      "data": "/src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "type contactInfo struct {\n\temail   string\n\tzipCode int\n}\n\ntype person struct {\n\tfirstName string\n\tlastName  string\n\tcontact   contactInfo\n}\n\nfunc main() {\n\tmer := person{\n\t\tfirstName: \"Mer\",\n\t\tlastName:  \"JQ\",\n\t\tcontact: contactInfo{\n\t\t\temail:   \"mer@gmail.com\",\n\t\t\tzipCode: 94000,\n\t\t},\n\t}\n\n\tfmt.Println(mer)\n}"
    },
    {
      "type": "text",
      "data": "<h3>Structs with Receiver Functions</h3>"
    },
    {
      "type": "text",
      "data": "src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "type contactInfo struct {\n\temail   string\n\tzipCode int\n}\n\ntype person struct {\n\tfirstName string\n\tlastName  string\n\tcontactInfo\n}\n\nfunc main() {\n\tjim := person{\n\t\tfirstName: \"Jim\",\n\t\tlastName:  \"Party\",\n\t\tcontactInfo: contactInfo{\n\t\t\temail:   \"jim@gmail.com\",\n\t\t\tzipCode: 94000,\n\t\t},\n\t}\n\n\tfmt.Println(jim)\n}"
    },
    {
      "type": "text",
      "data": "<b>Add receiver functions</b>"
    },
    {
      "type": "text",
      "data": "/src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "func main() {\n  mer.updateName(\"Jieqiong\")\n  mer.print()\n}\n\nfunc (p person) print() {\n    fmt.Println(p)\n}\n\nfunc (p person) updateName(newFirstName string) {\n\tp.firstName = newFirstName\n}"
    },
    {
      "type": "text",
      "data": "<h3>Pass By Value</h3>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/9E9F5B93C6291493D6541EE036C594B7.png\" alt=\"Screen Shot 2019-02-04 at 18.31.43.png\" width=\"606\" height=\"468\">"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/D4BDB12F2D6555FEB01D1AC357BD2509.png\" alt=\"Screen Shot 2019-02-04 at 18.33.33.png\" width=\"816\" height=\"453\">"
    },
    {
      "type": "text",
      "data": "<h3>Structs with Pointers</h3>"
    },
    {
      "type": "text",
      "data": "/src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "func main() {\n  merPointer := &mer\n\tmerPointer.updateName(\"Jieqiong\")\n\tmer.print()\n}\n\nfunc (p *person) updateName(newFirstName string) {\n\t(*p).firstName = newFirstName\n}"
    },
    {
      "type": "text",
      "data": "<h3>Pointer Operations</h3>"
    },
    {
      "type": "text",
      "data": "<b>&amp;variable</b>"
    },
    {
      "type": "text",
      "data": "Give me the memory address of the value this variable is pointing at"
    },
    {
      "type": "text",
      "data": "<b>*pointer</b>"
    },
    {
      "type": "text",
      "data": "Give me the value this memory address is pointing at&nbsp;"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/73C079C8DB52EA69377F67DF1DFC4054.png\" alt=\"Screen Shot 2019-02-04 at 18.36.34.png\" width=\"637\" height=\"336\">"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/49099D839CF81F4636C92B3BFF00A57B.png\" alt=\"Screen Shot 2019-02-04 at 18.36.52.png\" width=\"855\" height=\"456\">"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/B95878E5A4845D95C86A80F77E338266.png\" alt=\"Screen Shot 2018-08-20 at 3.48.16 PM.png\" width=\"1031\" height=\"527\">"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/AA5CF16D412A38DA6964537EF2718CC7.png\" alt=\"Screen Shot 2018-08-20 at 3.52.11 PM.png\" width=\"777\" height=\"210\">"
    },
    {
      "type": "text",
      "data": "<h3>Pointer Shortcut</h3>"
    },
    {
      "type": "text",
      "data": "main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "func main() {\n\tmer.updateName(\"Jieqiong\")\n\tmer.print()\n}\n\nfunc (pointerToPerson *person) updateName(newFirstName string) {\n\t(*pointerToPerson).firstName = newFirstName\n}"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/2F66C9C0220E83C71F7AC9ABF5CD20C6.png\" alt=\"Screen Shot 2019-02-04 at 18.42.06.png\" width=\"856\" height=\"418\">"
    },
    {
      "type": "text",
      "data": "<h3><b>Gotchas With Pointers</b></h3>"
    },
    {
      "type": "text",
      "data": "/src/struct/main.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "func main() {\n    mySlice := []string{\"Hi\", \"There\", \"How\", \"Are\", \"You\"}\n    updateSlice(mySlice)\n    fmt.Println(mySlice)\n}\n\nfunc updateSlice(s []string) {\n    s[0] = \"Bye\"\n}"
    },
    {
      "type": "text",
      "data": "<h3>Reference vs Value Types</h3>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/48DB9A1BE7D8E73ABE916DA72D87C959.png\" alt=\"Screen Shot 2018-08-20 at 4.24.43 PM.png\" width=\"992\" height=\"461\">"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/3D7395B7D44F42FE2F08614E372983BE.png\" alt=\"Screen Shot 2018-08-20 at 4.25.56 PM.png\" width=\"783\" height=\"533\">"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/69B3DB94532773CA2177A04D8608EBFA.png\" alt=\"Screen Shot 2018-08-20 at 4.27.32 PM.png\" width=\"1212\" height=\"510\">"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "<div><br></div><div><br></div>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}